# coding: utf-8

from __future__ import absolute_import
from clashofcubicles.models.worker import Worker
from .base_model_ import Model
from datetime import date, datetime
from typing import List, Dict
from ..util import deserialize_model


class Task(Model):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, id=None, worker=None, assigned_workers=None, description=None, expiry=None, sgf_state=None, status=None):
        """
        Task - a model defined in Swagger

        :param id: The id of this Task.
        :type id: int
        :param worker: The worker of this Task.
        :type worker: Worker
        :param assigned_workers: The assigned_workers of this Task.
        :type assigned_workers: List[Worker]
        :param description: The description of this Task.
        :type description: str
        :param expiry: The expiry of this Task.
        :type expiry: datetime
        :param sgf_state: The sgf_state of this Task.
        :type sgf_state: str
        :param status: The status of this Task.
        :type status: str
        """
        self.swagger_types = {
            'id': int,
            'worker': Worker,
            'assigned_workers': List[Worker],
            'description': str,
            'expiry': datetime,
            'sgf_state': str,
            'status': str
        }

        self.attribute_map = {
            'id': 'id',
            'worker': 'worker',
            'assigned_workers': 'assignedWorkers',
            'description': 'description',
            'expiry': 'expiry',
            'sgf_state': 'sgfState',
            'status': 'status'
        }

        self._id = id
        self._worker = worker
        self._assigned_workers = assigned_workers
        self._description = description
        self._expiry = expiry
        self._sgf_state = sgf_state
        self._status = status

    @classmethod
    def from_dict(cls, dikt):
        """
        Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Task of this Task.
        :rtype: Task
        """
        return deserialize_model(dikt, cls)

    @property
    def id(self):
        """
        Gets the id of this Task.

        :return: The id of this Task.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this Task.

        :param id: The id of this Task.
        :type id: int
        """

        self._id = id

    @property
    def worker(self):
        """
        Gets the worker of this Task.
        worker who assigned the task

        :return: The worker of this Task.
        :rtype: Worker
        """
        return self._worker

    @worker.setter
    def worker(self, worker):
        """
        Sets the worker of this Task.
        worker who assigned the task

        :param worker: The worker of this Task.
        :type worker: Worker
        """

        self._worker = worker

    @property
    def assigned_workers(self):
        """
        Gets the assigned_workers of this Task.

        :return: The assigned_workers of this Task.
        :rtype: List[Worker]
        """
        return self._assigned_workers

    @assigned_workers.setter
    def assigned_workers(self, assigned_workers):
        """
        Sets the assigned_workers of this Task.

        :param assigned_workers: The assigned_workers of this Task.
        :type assigned_workers: List[Worker]
        """

        self._assigned_workers = assigned_workers

    @property
    def description(self):
        """
        Gets the description of this Task.

        :return: The description of this Task.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """
        Sets the description of this Task.

        :param description: The description of this Task.
        :type description: str
        """

        self._description = description

    @property
    def expiry(self):
        """
        Gets the expiry of this Task.

        :return: The expiry of this Task.
        :rtype: datetime
        """
        return self._expiry

    @expiry.setter
    def expiry(self, expiry):
        """
        Sets the expiry of this Task.

        :param expiry: The expiry of this Task.
        :type expiry: datetime
        """

        self._expiry = expiry

    @property
    def sgf_state(self):
        """
        Gets the sgf_state of this Task.
        SGF representation of task state

        :return: The sgf_state of this Task.
        :rtype: str
        """
        return self._sgf_state

    @sgf_state.setter
    def sgf_state(self, sgf_state):
        """
        Sets the sgf_state of this Task.
        SGF representation of task state

        :param sgf_state: The sgf_state of this Task.
        :type sgf_state: str
        """

        self._sgf_state = sgf_state

    @property
    def status(self):
        """
        Gets the status of this Task.
        Task Status

        :return: The status of this Task.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """
        Sets the status of this Task.
        Task Status

        :param status: The status of this Task.
        :type status: str
        """
        allowed_values = ["backlog", "started", "review", "done", "rejected", "failed"]
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"
                .format(status, allowed_values)
            )

        self._status = status

