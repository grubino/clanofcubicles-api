# coding: utf-8

from __future__ import absolute_import
from clashofcubicles.models.message import Message
from clashofcubicles.models.office import Office
from clashofcubicles.models.task import Task
from clashofcubicles.models.user import User
from .base_model_ import Model
from datetime import date, datetime
from typing import List, Dict
from ..util import deserialize_model


class Worker(Model):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, id=None, name=None, owner=None, tasks=None, office=None, messages_received=None, messages_sent=None):
        """
        Worker - a model defined in Swagger

        :param id: The id of this Worker.
        :type id: int
        :param name: The name of this Worker.
        :type name: str
        :param owner: The owner of this Worker.
        :type owner: User
        :param tasks: The tasks of this Worker.
        :type tasks: List[Task]
        :param office: The office of this Worker.
        :type office: Office
        :param messages_received: The messages_received of this Worker.
        :type messages_received: List[Message]
        :param messages_sent: The messages_sent of this Worker.
        :type messages_sent: List[Message]
        """
        self.swagger_types = {
            'id': int,
            'name': str,
            'owner': User,
            'tasks': List[Task],
            'office': Office,
            'messages_received': List[Message],
            'messages_sent': List[Message]
        }

        self.attribute_map = {
            'id': 'id',
            'name': 'name',
            'owner': 'owner',
            'tasks': 'tasks',
            'office': 'office',
            'messages_received': 'messagesReceived',
            'messages_sent': 'messagesSent'
        }

        self._id = id
        self._name = name
        self._owner = owner
        self._tasks = tasks
        self._office = office
        self._messages_received = messages_received
        self._messages_sent = messages_sent

    @classmethod
    def from_dict(cls, dikt):
        """
        Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Worker of this Worker.
        :rtype: Worker
        """
        return deserialize_model(dikt, cls)

    @property
    def id(self):
        """
        Gets the id of this Worker.

        :return: The id of this Worker.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this Worker.

        :param id: The id of this Worker.
        :type id: int
        """

        self._id = id

    @property
    def name(self):
        """
        Gets the name of this Worker.

        :return: The name of this Worker.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this Worker.

        :param name: The name of this Worker.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def owner(self):
        """
        Gets the owner of this Worker.

        :return: The owner of this Worker.
        :rtype: User
        """
        return self._owner

    @owner.setter
    def owner(self, owner):
        """
        Sets the owner of this Worker.

        :param owner: The owner of this Worker.
        :type owner: User
        """

        self._owner = owner

    @property
    def tasks(self):
        """
        Gets the tasks of this Worker.

        :return: The tasks of this Worker.
        :rtype: List[Task]
        """
        return self._tasks

    @tasks.setter
    def tasks(self, tasks):
        """
        Sets the tasks of this Worker.

        :param tasks: The tasks of this Worker.
        :type tasks: List[Task]
        """

        self._tasks = tasks

    @property
    def office(self):
        """
        Gets the office of this Worker.

        :return: The office of this Worker.
        :rtype: Office
        """
        return self._office

    @office.setter
    def office(self, office):
        """
        Sets the office of this Worker.

        :param office: The office of this Worker.
        :type office: Office
        """

        self._office = office

    @property
    def messages_received(self):
        """
        Gets the messages_received of this Worker.

        :return: The messages_received of this Worker.
        :rtype: List[Message]
        """
        return self._messages_received

    @messages_received.setter
    def messages_received(self, messages_received):
        """
        Sets the messages_received of this Worker.

        :param messages_received: The messages_received of this Worker.
        :type messages_received: List[Message]
        """

        self._messages_received = messages_received

    @property
    def messages_sent(self):
        """
        Gets the messages_sent of this Worker.

        :return: The messages_sent of this Worker.
        :rtype: List[Message]
        """
        return self._messages_sent

    @messages_sent.setter
    def messages_sent(self, messages_sent):
        """
        Sets the messages_sent of this Worker.

        :param messages_sent: The messages_sent of this Worker.
        :type messages_sent: List[Message]
        """

        self._messages_sent = messages_sent

